AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template for Cognito custom authentication.

Parameters:
  ProjectName:
    Type: String
  CreateAuthChallengeFunctionArn:
    Type: String
  DefineAuthChallengeFunctionArn:
    Type: String
  VerifyAuthChallengeFunctionArn:
    Type: String
  AuthChallengeSenderEmailAddress:
    Type: String

Resources:
  # Cognito
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join [ "-", [ !Ref ProjectName, "user", "pool" ] ]
      AliasAttributes:
        - preferred_username
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: "○○システムの登録確認です。確認コードは、{####} です。"
      EmailVerificationSubject: "○○システム登録確認"
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      UsernameConfiguration:
        CaseSensitive: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: admin_only
            Priority: 1
      LambdaConfig:
        CreateAuthChallenge: !Ref CreateAuthChallengeFunctionArn
        DefineAuthChallenge: !Ref DefineAuthChallengeFunctionArn
        VerifyAuthChallengeResponse: !Ref VerifyAuthChallengeFunctionArn
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: cognito-client
      UserPoolId: !Ref UserPool
      PreventUserExistenceErrors: ENABLED
  IdPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Join [ "-", [ !Ref ProjectName, "id", "pool" ] ]
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !Join [ "", [ "cognito-idp.", !Ref AWS::Region, ".amazonaws.com/", !Ref UserPool ] ]
  UnauthenticatedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join [ "-", [ !Ref ProjectName, "cognito", "unauthenticated", "policy" ] ]
      PolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mobileanalytics:PutEvents",
              "cognito-sync:*"
            ],
            "Resource": "*"
          }
        ]
      }
  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref ProjectName, "cognito", "unauthenticated", "role" ] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": unauthenticated
      ManagedPolicyArns:
        - Ref: UnauthenticatedPolicy
  AuthenticatedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join [ "-", [ !Ref ProjectName, "cognito", "authenticated", "policy" ] ]
      PolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "mobileanalytics:PutEvents",
              "cognito-sync:*",
              "cognito-identity:*",
              "execute-api:*"
            ],
            "Resource": "*"
          }
        ]
      }
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref ProjectName, "cognito", "authenticated", "role" ] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      ManagedPolicyArns:
        - Ref: AuthenticatedPolicy
  IdPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdPool
      Roles:
        unauthenticated: !GetAtt UnauthenticatedRole.Arn
        authenticated: !GetAtt AuthenticatedRole.Arn
  # Lambda Permissions
  CreateAuthChallengeFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref CreateAuthChallengeFunctionArn
      Principal: "cognito-idp.amazonaws.com"
      SourceArn: !GetAtt UserPool.Arn
  DefineAuthChallengeFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref DefineAuthChallengeFunctionArn
      Principal: "cognito-idp.amazonaws.com"
      SourceArn: !GetAtt UserPool.Arn
  VerifyAuthChallengeFunctionPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref VerifyAuthChallengeFunctionArn
      Principal: "cognito-idp.amazonaws.com"
      SourceArn: !GetAtt UserPool.Arn
  # SES
  AuthChallengeEmailIdentity:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref AuthChallengeSenderEmailAddress
